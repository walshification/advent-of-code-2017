def solve(sequence, pair_step='next'):
    return sum(_digits_with_a_following_pair(sequence, pair_step))


def _digits_with_a_following_pair(sequence, pair_step):
    sequence_str = str(sequence)
    return [
        _digit_with_pair(i, sequence_str, pair_step)
        for i in range(len(sequence_str))
    ]


def _digit_with_pair(i, sequence_str, pair_step):
    next_i = _determine_next(i, sequence_str, pair_step)
    if sequence_str[i] == sequence_str[next_i]:
        return int(sequence_str[i])
    return 0


def _determine_next(i, sequence_str, pair_step):
    return {
        'half': _half_step_index(i, sequence_str),
        'next': (i + 1 if i + 1 != len(sequence_str) else 0),
    }[pair_step]


def _half_step_index(i, sequence_str):
    return int((i + (len(sequence_str) / 2)) % len(sequence_str))


if __name__ == '__main__':
    problem_input = int("""
2373699914823461246633952863546729854573268657485334121797781883978352
7958414997199979851227942926872717175546141897455853824642998674753241
7846157526523238931351898548279549456694488433438982744782258279173323
3815719854542365693939757357153314382567955795141599465378683587359368
3248742293867819475768769814322413924315122247513133713584379361174238
3267186158665726927967655583875485515512626142935357421852953775733748
9419269833777253861961874861313374585748298487237113559296846252235644
8948559756476831743289383662925527345277623231926542253344954995624479
1565573727762687439221862632722277129613329167189874939414298584616496
8392232391972775636418537461932325432228132981951693451864998661475865
5978152383459568349615158154682911274553334779621367381499584915632167
4379644323159259131925444961296821167483628812395391533572555624159939
2791253413351472346535729773455821357289943956316856181355636626898546
9197684343578587995275126662764565398128189164382371752875734113674788
1518611439246877373935758151119185587921332175189332436522732144278613
4867165258972628792877729695294455117369249627772623949615475792487313
4324524196391477599129217715155444669513465359663343317186661854195723
3463548142173235821168156636824233487983766612338498874251672993917446
3668658326184754913412539732675561133232451138451481215465263969959911
7173983714747997864516641798891828928784438451397436939797437881984855
2153961651881528134624869454563488858625261356763562723261767873542683
7966757971243223827324372355449656479345148716725227773789315249947848
4581758479356497428513986797218588718598735346848815528369846422641595
1583138352839943621294117262483559867661596299753986347244786339543174
5942664228157946584776298293834618292619945913188515879635548294593538
9282584797897182334721946851678485734864969318517219939823412374541527
1222891161175788713733444497592853221743138324235934216658323717267715
3187445376894591131885498967375816378795525688295483657383145938512211
13932919767844137362623398623853789938824592""".replace("\n", ""))
    print('Part One: ', solve(problem_input))
    print('Part Two: ', solve(problem_input, pair_step='half'))
